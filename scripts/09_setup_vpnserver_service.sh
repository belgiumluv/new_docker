#!/usr/bin/env bash
set -euo pipefail

# ==============================================================================
# Setup "service" layer for container/K8s (NO systemd)
# - Создаёт supervisord-конфиг для sing-box и haproxy
# - Обе службы запускаются через наши скрипты с RUN_MODE=watch
# - Логи/пиды лежат в /app/data
# - Если файл уже существует — не перезаписываем (идемпотентность)
# ==============================================================================

APP_ROOT="${APP_ROOT:-/app}"
APP_CFG="${APP_CFG:-$APP_ROOT/config}"
APP_DATA="${APP_DATA:-$APP_ROOT/data}"

SUPERVISOR_DIR="${SUPERVISOR_DIR:-$APP_CFG}"
SUPERVISOR_CONF="${SUPERVISOR_CONF:-$SUPERVISOR_DIR/supervisord.conf}"

RUN_DIR="${RUN_DIR:-$APP_DATA/run}"
LOG_DIR="${LOG_DIR:-$APP_DATA/logs}"

# Бинарь supervisord (ожидается установленным в образ)
SUPERVISORD_BIN="${SUPERVISORD_BIN:-/usr/bin/supervisord}"
SUPERVISORCTL_BIN="${SUPERVISORCTL_BIN:-/usr/bin/supervisorctl}"

# Пути к нашим скриптам
SINGBOX_SETUP="${SINGBOX_SETUP:-$APP_ROOT/bin/07_setup_singbox_full.sh}"
HAPROXY_SETUP="${HAPROXY_SETUP:-$APP_ROOT/bin/08_deploy_haproxy_etc.sh}"

# Доп. окружение для процессов (можно переопределить)
ENV_EXPORT="
APP_ROOT=\"$APP_ROOT\",
APP_CFG=\"$APP_CFG\",
APP_DATA=\"$APP_DATA\",
SQLITE_PATH=\"$APP_DATA/bd/bd.db\",
RUN_DIR=\"$RUN_DIR\",
LOG_DIR=\"$LOG_DIR\"
"

echo "[info] APP_ROOT=$APP_ROOT"
echo "[info] APP_CFG=$APP_CFG"
echo "[info] APP_DATA=$APP_DATA"
echo "[info] SUPERVISOR_CONF=$SUPERVISOR_CONF"

# Проверки на наличие нужных скриптов
if [[ ! -x "$SINGBOX_SETUP" ]]; then
  echo "[err ] sing-box setup script not found or not executable: $SINGBOX_SETUP" >&2
  exit 2
fi
if [[ ! -x "$HAPROXY_SETUP" ]]; then
  echo "[err ] haproxy setup script not found or not executable: $HAPROXY_SETUP" >&2
  exit 2
fi

# Создаём каталоги для рантайма
mkdir -p "$RUN_DIR" "$LOG_DIR" "$SUPERVISOR_DIR"

# Подготовим supervisord.conf, если отсутствует
if [[ -f "$SUPERVISOR_CONF" ]]; then
  echo "[skip] supervisord.conf already exists: $SUPERVISOR_CONF"
else
  cat >"$SUPERVISOR_CONF" <<EOF
; =============================================================================
; Supervisord configuration (generated by 09_setup_vpnserver_service.sh)
; Logs/PIDs live in /app/data, configs in /app/config
; =============================================================================

[unix_http_server]
file=$RUN_DIR/supervisor.sock

[supervisord]
logfile=$LOG_DIR/supervisord.log
pidfile=$RUN_DIR/supervisord.pid
childlogdir=$LOG_DIR
loglevel=info
nodaemon=false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix://$RUN_DIR/supervisor.sock

; ---------------- Programs ----------------

; sing-box in watch mode (auto-reload on /app/config/server.json changes)
[program:singbox]
command=/bin/bash -lc 'RUN_MODE=watch "$SINGBOX_SETUP"'
process_name=%(program_name)s
autostart=true
autorestart=true
stopsignal=TERM
stdout_logfile=$LOG_DIR/singbox.supervisor.out.log
stderr_logfile=$LOG_DIR/singbox.supervisor.err.log
environment=$ENV_EXPORT,SINGBOX_SETUP="$SINGBOX_SETUP"

; haproxy in watch mode (hot-reload on /app/config/haproxy/haproxy.cfg changes)
[program:haproxy]
command=/bin/bash -lc 'RUN_MODE=watch "$HAPROXY_SETUP"'
process_name=%(program_name)s
autostart=true
autorestart=true
stopsignal=TERM
stdout_logfile=$LOG_DIR/haproxy.supervisor.out.log
stderr_logfile=$LOG_DIR/haproxy.supervisor.err.log
environment=$ENV_EXPORT,HAPROXY_SETUP="$HAPROXY_SETUP"

; (optional) periodic mutator which updates paths and triggers haproxy reload
; uncomment if нужен периодический ран (пример: раз в 60 секунд)
; [program:mutate-and-apply]
; command=/bin/bash -lc 'while sleep 60; do python3 /app/bin/10_mutate_server_json.py && python3 /app/bin/11_apply_haproxy_changes.py || true; done'
; autostart=true
; autorestart=true
; stdout_logfile=$LOG_DIR/mutator.out.log
; stderr_logfile=$LOG_DIR/mutator.err.log
; environment=$ENV_EXPORT

EOF

  echo "[ok ] created: $SUPERVISOR_CONF"
fi

# Подсказки по запуску supervisord (на ответственность entrypoint'а)
if [[ ! -x "$SUPERVISORD_BIN" ]]; then
  echo "[warn] supervisord binary not found at $SUPERVISORD_BIN."
  echo "      Ensure supervisor is installed in the Docker image,"
  echo "      or start processes via entrypoint manually."
else
  echo "[info] To run supervisor as PID 1 in container, use:"
  echo "       $SUPERVISORD_BIN -c $SUPERVISOR_CONF"
fi

echo "[done] supervisor config is ready"
